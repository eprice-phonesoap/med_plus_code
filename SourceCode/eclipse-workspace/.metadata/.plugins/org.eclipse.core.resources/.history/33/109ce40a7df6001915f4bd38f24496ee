/**
@file			  IOExtenderControl.c
@author			  JGS
@brief			  Motor control service module related functions definitions
*/


//_____I N C L U D E ________________________________________________________
// Place here all includes needed by this file starting with its own header
// showing the reason of the include.
#include "driver/i2c.h"

#include "esp_err.h"
#include "esp_log.h"

#include "I2C_Driver.h"
//_____D E F I N E __________________________________________________________
// local private defines, enums, macros

#define I2C_EXAMPLE_MASTER_SCL_IO          17               /*!< gpio number for I2C master clock */
#define I2C_EXAMPLE_MASTER_SDA_IO          5               /*!< gpio number for I2C master data  */
#define I2C_EXAMPLE_MASTER_NUM             I2C_NUM_0        /*!< I2C port number for master dev */
#define I2C_EXAMPLE_MASTER_TX_BUF_DISABLE  0                /*!< I2C master do not need buffer */
#define I2C_EXAMPLE_MASTER_RX_BUF_DISABLE  0                /*!< I2C master do not need buffer */
#define I2C_EXAMPLE_MASTER_FREQ_HZ         100000           /*!< I2C master clock frequency */

#define WRITE_BIT                          I2C_MASTER_WRITE /*!< I2C master write */
#define READ_BIT                           I2C_MASTER_READ  /*!< I2C master read */
#define ACK_CHECK_EN                       0x1              /*!< I2C master will check ack from slave*/
#define ACK_CHECK_DIS                      0x0              /*!< I2C master will not check ack from slave */
#define ACK_VAL                            0x0              /*!< I2C ack value */
#define NACK_VAL                           0x1              /*!< I2C nack value */

//_____ T Y P E D E F _______________________________________________________
// local private typedefs, structs, unions

//_____ P R O T O T Y P E S _________________________________________________
// local function declarations

//_____ L O C A L  D A T A __________________________________________________
// local private data (static)

//_____ P U B L I C   F U N C T I O N S _____________________________________
// public interface functions
void I2C_Init(void)
{
    int i2c_master_port = I2C_EXAMPLE_MASTER_NUM;
    i2c_config_t conf;
    conf.mode = I2C_MODE_MASTER;
    conf.sda_io_num = I2C_EXAMPLE_MASTER_SDA_IO;
    conf.sda_pullup_en = GPIO_PULLUP_DISABLE;
    conf.scl_io_num = I2C_EXAMPLE_MASTER_SCL_IO;
    conf.scl_pullup_en = GPIO_PULLUP_DISABLE;
    conf.master.clk_speed = I2C_EXAMPLE_MASTER_FREQ_HZ;
    i2c_param_config(i2c_master_port, &conf);
    i2c_driver_install(i2c_master_port, conf.mode,
                       I2C_EXAMPLE_MASTER_RX_BUF_DISABLE,
                       I2C_EXAMPLE_MASTER_TX_BUF_DISABLE, 0);
}


esp_err_t I2C_read(uint8_t slaveAddr, uint8_t* data_rd, size_t size)
{
	i2c_port_t i2c_num = I2C_EXAMPLE_MASTER_NUM;
    if (size == 0) {
        return ESP_OK;
    }
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, ( slaveAddr << 1 ) | READ_BIT, ACK_CHECK_EN);
    if (size > 1) {
        i2c_master_read(cmd, data_rd, size - 1, ACK_VAL);
    }
    i2c_master_read_byte(cmd, data_rd + size - 1, NACK_VAL);
    i2c_master_stop(cmd);
    esp_err_t ret = i2c_master_cmd_begin(i2c_num, cmd, 1000 / portTICK_RATE_MS);
    i2c_cmd_link_delete(cmd);
    return ret;
}

esp_err_t I2C_read_reg(uint8_t slaveAddr, uint8 reg, uint8_t* data_rd, size_t size)
{
//	i2c_port_t i2c_num = I2C_EXAMPLE_MASTER_NUM;
//    if (size == 0) {
//        return ESP_OK;
//    }
//    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
//    i2c_master_start(cmd);
//    i2c_master_write_byte(cmd, ( slaveAddr << 1 ) | READ_BIT, ACK_CHECK_EN);
//    i2c_master_write_byte(cmd, reg, ACK_CHECK_EN);
//    if (size > 1) {
//        i2c_master_read(cmd, data_rd, size - 1, ACK_VAL);
//    }
//    i2c_master_read_byte(cmd, data_rd + size - 1, NACK_VAL);
//    i2c_master_stop(cmd);
//    esp_err_t ret = i2c_master_cmd_begin(i2c_num, cmd, 1000 / portTICK_RATE_MS);
//    i2c_cmd_link_delete(cmd);
//    return ret;
	i2c_port_t i2c_num = I2C_EXAMPLE_MASTER_NUM;
	if (size == 0) {
	        return ESP_OK;
	    }
	    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
	    i2c_master_start(cmd);
	    // first, send device address (indicating write) & register to be read
	    i2c_master_write_byte(cmd, ( slaveAddr << 1 ), ACK_CHECK_EN);
	    // send register we want
	    i2c_master_write_byte(cmd, reg, ACK_CHECK_EN);
	    // Send repeated start
	    i2c_master_start(cmd);
	    // now send device address (indicating read) & read data
	    i2c_master_write_byte(cmd, ( slaveAddr << 1 ) | READ_BIT, ACK_CHECK_EN);
	    if (size > 1) {
	        i2c_master_read(cmd, data_rd, size - 1, ACK_VAL);
	    }
	    i2c_master_read_byte(cmd, data_rd + size - 1, NACK_VAL);
	    i2c_master_stop(cmd);
	    esp_err_t ret = i2c_master_cmd_begin(i2c_num, cmd, 1000 / portTICK_RATE_MS);
	    i2c_cmd_link_delete(cmd);
	    return ret;
}


esp_err_t I2C_write(uint8_t slaveAddr, uint8_t* data_wr, size_t size)
{
	i2c_port_t i2c_num = I2C_EXAMPLE_MASTER_NUM;
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, ( slaveAddr << 1 ) | WRITE_BIT, ACK_CHECK_EN);
    i2c_master_write(cmd, data_wr, size, ACK_CHECK_EN);
    i2c_master_stop(cmd);
    esp_err_t ret = i2c_master_cmd_begin(i2c_num, cmd, 1000 / portTICK_RATE_MS);
    i2c_cmd_link_delete(cmd);
    return ret;
}

esp_err_t I2C_write_reg(uint8_t slaveAddr, uint8_t reg, uint8_t* data_wr, size_t size)
{
	i2c_port_t i2c_num = I2C_EXAMPLE_MASTER_NUM;
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, ( slaveAddr << 1 ) | WRITE_BIT, ACK_CHECK_EN);
    i2c_master_write_byte(cmd, reg, ACK_CHECK_EN);
    i2c_master_write(cmd, data_wr, size, ACK_CHECK_EN);
    i2c_master_stop(cmd);
    esp_err_t ret = i2c_master_cmd_begin(i2c_num, cmd, 1000 / portTICK_RATE_MS);
    i2c_cmd_link_delete(cmd);
    return ret;
}


esp_err_t I2C_write_byte(uint8_t slaveAddr, uint8_t data_wr)
{
	i2c_port_t i2c_num = I2C_EXAMPLE_MASTER_NUM;
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, ( slaveAddr << 1 ) | WRITE_BIT, ACK_CHECK_EN);
    i2c_master_write_byte(cmd, data_wr, ACK_CHECK_EN);
    i2c_master_stop(cmd);
    esp_err_t ret = i2c_master_cmd_begin(i2c_num, cmd, 1000 / portTICK_RATE_MS);
    i2c_cmd_link_delete(cmd);
    return ret;
}

 //_____ L O C A L  F U N C T I O N S ________________________________________
 // local interface functions
